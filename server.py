from fastapi import FastAPI, Request
import sqlite3
import qrcode
import os
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, JSONResponse

app = FastAPI()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
DATABASE = "staff.db"

def init_db():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS staff (
        user_id TEXT PRIMARY KEY,
        name TEXT
    )
    """)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ review_count
    cursor.execute("PRAGMA table_info(staff)")
    columns = [col[1] for col in cursor.fetchall()]
    
    if "review_count" not in columns:
        cursor.execute("ALTER TABLE staff ADD COLUMN review_count INTEGER DEFAULT 0")
    
    conn.commit()
    conn.close()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
init_db()

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è QR-–∫–æ–¥–æ–≤
if not os.path.exists("qr_codes"):
    os.makedirs("qr_codes")

# –î–µ–ª–∞–µ–º –ø–∞–ø–∫—É —Å QR-–∫–æ–¥–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
app.mount("/qr_codes", StaticFiles(directory="qr_codes"), name="qr_codes")

# –î–µ–ª–∞–µ–º –ø–∞–ø–∫—É web –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.mount("/web", StaticFiles(directory="web"), name="web")

# –û—Ç–¥–∞—ë–º index.html –∫–∞–∫ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
@app.get("/")
async def root():
    return FileResponse("web/index.html")

# üìå API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@app.get("/register/{user_id}/{name}")
def register_user(user_id: str, name: str):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM staff WHERE user_id=?", (user_id,))
    user = cursor.fetchone()

    if user:
        return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"}

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
    review_url = f"https://g.page/r/YOUR_PLACE_ID/review?staff={user_id}"
    qr = qrcode.make(review_url)
    qr_path = f"qr_codes/{user_id}.png"
    qr.save(qr_path)

    cursor.execute("INSERT INTO staff (user_id, name) VALUES (?, ?)", (user_id, name))
    conn.commit()
    conn.close()

    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "qr_code": qr_path}

# üìå API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
@app.get("/user/{user_id}")
def get_user(user_id: str):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT name, reviews FROM staff WHERE user_id=?", (user_id,))
    user = cursor.fetchone()
    conn.close()

    if user:
        return {"name": user[0], "reviews": user[1]}
    return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

# üìå API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
@app.get("/leaderboard")
async def get_leaderboard():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT name, reviews FROM staff ORDER BY reviews DESC")
    users = [{"name": row[0], "reviews": row[1]} for row in cursor.fetchall()]
    conn.close()

    print("Leaderboard Data:", users)  # –û—Ç–ª–∞–¥–∫–∞
    return users

# üìå API –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
@app.post("/submit_review")
async def submit_review(request: Request):
    try:
        data = await request.json()
        user_id = data.get("user_id")
        name = data.get("name")

        if not user_id or not name:
            return JSONResponse({"error": "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}, status_code=400)

        conn = sqlite3.connect(DATABASE)
        cursor = conn.cursor()

        cursor.execute("SELECT reviews FROM staff WHERE user_id=?", (user_id,))
        row = cursor.fetchone()

        if row:
            cursor.execute("UPDATE staff SET reviews = reviews + 1 WHERE user_id=?", (user_id,))
        else:
            print(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É —Å ID {user_id}")  # –û—Ç–ª–∞–¥–∫–∞
            cursor.execute("INSERT INTO staff (user_id, name, reviews) VALUES (?, ?, 1)", (user_id, name))

        conn.commit()
        conn.close()

        response = {"message": "–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"}
        print("Response:", response)  # –û—Ç–ª–∞–¥–∫–∞
        return JSONResponse(response)
    except Exception as e:
        print("Error:", str(e))  # –û—Ç–ª–∞–¥–∫–∞
        return JSONResponse({"error": str(e)}, status_code=500)

# üìå –ó–∞–ø—É—Å–∫ FastAPI-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)