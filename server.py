from fastapi import FastAPI, Request
import sqlite3
import qrcode
import os
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse

app = FastAPI()

# –ò–º–∏—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ SQLite)
leaderboard = {}

# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è QR-–∫–æ–¥–æ–≤
if not os.path.exists("qr_codes"):
    os.makedirs("qr_codes")

# –î–µ–ª–∞–µ–º –ø–∞–ø–∫—É qr_codes –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
app.mount("/qr_codes", StaticFiles(directory="qr_codes"), name="qr_codes")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("staff.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute("""
    CREATE TABLE IF NOT EXISTS staff (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE,
        name TEXT,
        qr_code TEXT,
        review_count INTEGER DEFAULT 0
    )
""")
conn.commit()

# üìå API –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@app.get("/register/{user_id}/{name}")
def register_user(user_id: int, name: str):
    cursor.execute("SELECT * FROM staff WHERE user_id=?", (user_id,))
    user = cursor.fetchone()

    if user:
        return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "qr_code": user[3]}

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    review_url = f"https://g.page/r/YOUR_PLACE_ID/review?staff={user_id}"
    qr = qrcode.make(review_url)
    qr_path = f"qr_codes/{user_id}.png"
    qr.save(qr_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("INSERT INTO staff (user_id, name, qr_code) VALUES (?, ?, ?)", (user_id, name, qr_path))
    conn.commit()

    return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "qr_code": qr_path}

# üìå API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
@app.get("/user/{user_id}")
def get_user(user_id: int):
    cursor.execute("SELECT * FROM staff WHERE user_id=?", (user_id,))
    user = cursor.fetchone()
    
    if user:
        return {"id": user[0], "name": user[2], "qr_code": user[3], "reviews": user[4]}
    
    return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

# üìå API –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
@app.get("/leaderboard")
def get_leaderboard():
    cursor.execute("SELECT name, review_count FROM staff ORDER BY review_count DESC LIMIT 10")
    leaderboard = cursor.fetchall()

    return [{"name": row[0], "reviews": row[1]} for row in leaderboard]

# üìå –ó–∞–ø—É—Å–∫ FastAPI-—Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

app.mount("/web", StaticFiles(directory="web"), name="web")

# –û—Ç–¥–∞—ë–º index.html –∫–∞–∫ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
@app.get("/")
async def root():
    return FileResponse("web/index.html")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DATABASE = "staff.db"

def init_db():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS staff (
        user_id TEXT PRIMARY KEY,
        name TEXT,
        reviews INTEGER DEFAULT 0
    )
    """)
    conn.commit()
    conn.close()

init_db()

@app.get("/leaderboard")
async def get_leaderboard():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT name, reviews FROM staff ORDER BY reviews DESC")
    users = [{"name": row[0], "reviews": row[1]} for row in cursor.fetchall()]
    conn.close()
    return users

@app.post("/review/{user_id}/{name}")
async def leave_review(user_id: str, name: str):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()

    cursor.execute("SELECT reviews FROM staff WHERE user_id=?", (user_id,))
    row = cursor.fetchone()

    if row:
        cursor.execute("UPDATE staff SET reviews = reviews + 1 WHERE user_id=?", (user_id,))
    else:
        cursor.execute("INSERT INTO staff (user_id, name, reviews) VALUES (?, ?, 1)", (user_id, name))

    conn.commit()
    conn.close()
    return {"message": "–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"}

@app.post("/submit_review")
async def submit_review(request: Request):
    data = await request.json()
    user_id = data.get("user_id")
    name = data.get("name")

    if not user_id or not name:
        return JSONResponse(content={"error": "–ù–µ—Ç user_id –∏–ª–∏ name"}, status_code=400)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in leaderboard:
        leaderboard[user_id]["reviews"] += 1
    else:
        leaderboard[user_id] = {"name": name, "reviews": 1}

    return {"message": "–û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω", "leaderboard": leaderboard}
